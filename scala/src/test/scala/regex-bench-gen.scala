import scala.util.matching.Regex

object RegexBenchGen {
  def quote (s: String): String = if (s == null) "null" else "\"" + escape(s) + "\""
  def escape(s: String): String = s.flatMap(escapedChar)

  def escapedChar(ch: Char): String = ch match {
    case '\b' => "\\b"
    case '\t' => "\\t"
    case '\n' => "\\n"
    case '\f' => "\\f"
    case '\r' => "\\r"
    case '"'  => "\\\""
    case '\'' => "\\\'"
    case '\\' => "\\\\"
    case _    => if (ch.isControl) "\\0" + Integer.toOctalString(ch.toInt)
                 else              String.valueOf(ch)
  }
  var i = 0

  def mains(args: Array[String]): Unit = {
    def test(r: Regex, s: String, o: String): Unit =
      val m = r.pattern.matcher(s)
      if (m.matches())
        if (m.groupCount == 0)
          println((new Exception).getStackTrace().map(_.getLineNumber()).toList.tail.head)

        import Package.Lib._
        val fns0 = compile(r.toString)
        val fns1 = fns0.map(_.apply("")).map {
          case _: String    => { (x: String) => x }
          case _: Option[_] => { (x: String) => s"Some($x)" }
        }
        val extracts = Array.tabulate(m.groupCount)(i => quote(m.group(i + 1))).toList
        val patterns = Array.tabulate(m.groupCount)(i => s"g$i").toList
          .zip(fns1).map((x, f) => f(x))
          .zip(extracts).map { case (p, e) => if (e == "null") then "None" else p }
          .mkString("(", ", ", ")")
        val values = Array.tabulate(m.groupCount)(i => s"g$i").toList
          .zip(extracts).map { case (p, e) => if (e == "null") then "null" else p }
          .mkString("(", ", ", ")")
        i += 1
        val out = s"val r$i = Regex(${quote(r.toString)}); ${quote(s)} match { case r$i$patterns => assert($values == ${extracts.mkString("(", ", ", ")")}) }"
        println(out)
      else
        ???

    test("((((((((((a))))))))))".r, "a", "y")
    test("((((((((((a))))))))))\\10".r, "aa", "y")
    test("(((((((((a)))))))))".r, "a", "y")
    test("((?:aaaa|bbbb)cccc)?".r, "aaaacccc", "y")
    test("((?:aaaa|bbbb)cccc)?".r, "bbbbcccc", "y")
    test("((?i)a)b".r, "ab", "p")
    test("((?i)a)b".r, "Ab", "p")
    test("((?i:a))b".r, "ab", "p")
    test("((?i:a))b".r, "Ab", "p")
    test("(([a-c])b*?\\2)*".r, "ababbbcbc", "y")
    test("(([a-c])b*?\\2){3}".r, "ababbbcbc", "y")
    test("((a)(b)c)(d)".r, "abcd", "y")
    test("((foo)|(bar))*".r, "foobar", "y")
    test("(.*)c(.*)".r, "abcde", "y")
    test("(?:(f)(o)(o)|(b)(a)(r))*".r, "foobar", "y")
    test("([[:digit:]-[:alpha:]]+)".r, "-", "sc")
    test("([[:digit:]-z]+)".r, "-", "sc")
    test("([\\d-\\s]+)".r, "-", "sc")
    test("([\\d-z]+)".r, "-", "sc")
    test("([\\w:]+::)?(\\w+)$".r, "abcd", "y")
    test("([\\w:]+::)?(\\w+)$".r, "xy:z:::abcd", "y")
    test("([a-c]*)\\1".r, "abcabc", "y")
    test("([abc])*bcd".r, "abcd", "y")
    test("([abc])*d".r, "abbbcd", "y")
    test("([yX].|WORDS|[yX].|WORD)+S".r, "WORDS", "y")
    test("([yX].|WORDS|[yX].|WORD)S".r, "WORDS", "y")
    test("([yX].|WORDS|WORD|[xY].)+S".r, "WORDS", "y")
    test("([yX].|WORDS|WORD|[xY].)S".r, "WORDS", "y")
    test("([zx].|foo|fool|[zq].|money|parted|[yx].)$".r, "fool", "y")
    test("([zx].|foo|fool|[zq].|money|parted|[yx].)+$".r, "fool", "y")
    test("(\\d+\\.\\d+)".r, "3.1415926", "y")
    test("(\\w+:)+".r, "one:", "y")
    test("(^|a)b".r, "ab", "y")
    test("(a)?(a)+".r, "a", "y")
    test("(a)b(c)".r, "abc", "y")
    test("(a)|(b)".r, "b", "y")
    test("(a)|\\1".r, "a", "y")
    test("(a+|b)*".r, "ab", "y")
    test("(a+|b)+".r, "ab", "y")
    test("(a+|b){0,}".r, "ab", "y")
    test("(a+|b){1,}".r, "ab", "y")
    test("(aA)*+b".r, "aAaAaAaAaAb", "p")
    test("(aA)++b".r, "aAaAaAaAaAb", "p")
    test("(aA)?+b".r, "aAb", "p")
    test("(aA){1,5}+b".r, "aAaAaAaAaAb", "p")
    test("(aA|bB)*+b".r, "bBbBbBbBbBb", "p")
    test("(aA|bB)++b".r, "aAbBaAaAbBb", "p")
    test("(aA|bB)?+b".r, "bBb", "p")
    test("(aA|bB){1,5}+b".r, "bBaAbBaAbBb", "p")
    test("(ab)?(ab)+".r, "ab", "y")
    test("(abc)?(abc)+".r, "abc", "y")
    test("(abc)\\1".r, "abcabc", "y")
    test("(ab|a)b*c".r, "abc", "y")
    test("(ab|ab*)bc".r, "abc", "y")
    test("(a|(bc)){0,0}+xyz".r, "xyz", "p")
    test("(a|(bc)){0,0}?xyz".r, "xyz", "y")
    test("(a|b|c|d|e)f".r, "ef", "y")
    test("(bc+d$|ef*g.|h?i(j|k))".r, "effgz", "y")
    test("(bc+d$|ef*g.|h?i(j|k))".r, "ij", "y")
    test("(foo[1x]|bar[2x]|baz[3x])*y".r, "foo1bar2baz3y", "y")
    test("(foo[1x]|bar[2x]|baz[3x])+y".r, "foo1bar2baz3y", "y")
    test("(foo|fool|[zx].|money|parted)$".r, "fool", "y")
    test("(foo|fool|[zx].|money|parted)+$".r, "fool", "y")
    test("(foo|fool|money|parted)$".r, "fool", "y")
    test("(foo|fool|x.|money|parted)$".r, "fool", "y")
    test("(q1|.)*(q2|.)*(x(a|bc)*y){2,3}".r, "xayxay", "y")
    test("(q1|.)*(q2|.)*(x(a|bc)*y){2,}".r, "xayxay", "y")
    test("(q1|z)*(q2|z)*z{15}-.*?(x(a|bc)*y){2,3}Z".r, "zzzzzzzzzzzzzzzz-xayxayxayxayZ", "y")
    test("(WORDS|WORD)S".r, "WORDS", "y")
    test("(WORDS|WORLD|WORD)+S".r, "WORDS", "y")
    test("(WORDS|WORLD|WORD)S".r, "WORDS", "y")
    test("(x.|foo|fool|x.|money|parted|y.)$".r, "fool", "y")
    test("(X.|WORDS|WORD|Y.)S".r, "WORDS", "y")
    test("(X.|WORDS|X.|WORD)S".r, "WORDS", "y")
    test("(x|y|z[QW])*(longish|loquatious|excessive|overblown[QW])*".r, "xyzQzWlongishoverblownW", "y")
    test("(x|y|z[QW])*+(longish|loquatious|excessive|overblown[QW])*+".r, "xyzQzWlongishoverblownW", "p")
    test("(x|y|z[QW])+(longish|loquatious|excessive|overblown[QW])+".r, "xyzQzWlongishoverblownW", "y")
    test("(x|y|z[QW])++(longish|loquatious|excessive|overblown[QW])++".r, "xyzQzWlongishoverblownW", "p")
    test("(x|y|z[QW]){1,5}(longish|loquatious|excessive|overblown[QW]){1,5}".r, "xyzQzWlongishoverblownW", "y")
    test("(x|y|z[QW]){1,5}+(longish|loquatious|excessive|overblown[QW]){1,5}+".r, "xyzQzWlongishoverblownW", "p")
    test(".*?(?:(\\w)|(\\w))x".r, "abx", "y")
    test("2(]*)?$\\1".r, "2", "p")
    test("\\((.*), (.*)\\)".r, "(a, b)", "y")
    test("^((?:aa)*)(?:X+((?:\\d+|-)(?:X+(.+))?))?$".r, "aaaaX5", "y")
    test("^((a|b)+)*ax".r, "aax", "y")
    test("^((a|bc)+)*ax".r, "aax", "y")
    test("^(.*?)\\s*\\|\\s*(?:\\/\\s*|)'(.+)'$".r, "text|'sec'", "p")
    test("^(.+)?B".r, "AB", "y")
    test("^(.,){2}c".r, "a,b,c", "y")
    test("^(0+)?(?:x(1))?".r, "x1", "y")
    test("^(?:(\\d)x)?\\d$".r, "1", "y")
    test("^(?:(X)?(\\d)|(X)?(\\d\\d))$".r, "X12", "y")
    test("^(?:(XX)?(\\d)|(XX)?(\\d\\d))$".r, "XX12", "y")
    test("^(?:f|o|b){2,3}?((?:b|a|r)+)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){2,3}?((?:b|a|r)+?)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){2,3}?(.+)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){2,3}?(.+?)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){3,4}((?:b|a|r)+)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){3,4}((?:b|a|r)+?)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){3,4}(.+)\\1$".r, "foobarbar", "y")
    test("^(?:f|o|b){3,4}(.+?)\\1$".r, "foobarbar", "y")
    test("^([0-9a-fA-F]+)(?:x([0-9a-fA-F]+)?)(?:x([0-9a-fA-F]+))?".r, "012cxx0190", "y")
    test("^([^,]*,){0,3}d".r, "aaa,b,c,d", "y")
    test("^([^,]*,){2}c".r, "a,b,c", "y")
    test("^([^,]*,){3,}d".r, "aaa,b,c,d", "y")
    test("^([^,]*,){3}d".r, "aaa,b,c,d", "y")
    test("^([^,]{0,3},){0,3}d".r, "aaa,b,c,d", "y")
    test("^([^,]{0,3},){3,}d".r, "aaa,b,c,d", "y")
    test("^([^,]{0,3},){3}d".r, "aaa,b,c,d", "y")
    test("^([^,]{1,3},){0,3}d".r, "aaa,b,c,d", "y")
    test("^([^,]{1,3},){3,}d".r, "aaa,b,c,d", "y")
    test("^([^,]{1,3},){3}d".r, "aaa,b,c,d", "y")
    test("^([^,]{1,},){0,3}d".r, "aaa,b,c,d", "y")
    test("^([^,]{1,},){3,}d".r, "aaa,b,c,d", "y")
    test("^([^,]{1,},){3}d".r, "aaa,b,c,d", "y")
    test("^([^a-z])|(\\^)$".r, ".", "y")
    test("^([a]{1})*$".r, "aa", "y")
    test("^([ab]*?)(b)?(c)$".r, "abac", "y")
    test("^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQQQQQQQQQQQQQQQQP:", "y")
    test("^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQX:", "y")
    test("^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P|[MKJ]):".r, "ZEQQQQQQQQQQQQQQQQQQP:", "y")
    test("^([TUV]+|XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P|[MKJ]):".r, "ZEQQQX:", "y")
    test("^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQQQQQQQQQQQQQQQQP:", "y")
    test("^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQX:", "y")
    test("^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P|[MKJ]):".r, "ZEQQQQQQQQQQQQQQQQQQP:", "y")
    test("^([TUV]+|XXX|YYY|Z.Q*X|Z[TE]Q*P|[MKJ]):".r, "ZEQQQX:", "y")
    test("^(a(b)?)+$".r, "aba", "y")
    test("^(a)?a$".r, "a", "y")
    test("^(a+)*ax".r, "aax", "y")
    test("^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$".r, "aaaaaa", "p")
    test("^(a\\1?){4}$".r, "aaaaaa", "p")
    test("^(a\\1?){4}$".r, "aaaaaaaaaa", "p")
    test("^(aa(bb)?)+$".r, "aabbaa", "y")
    test("^(b+?|a){1,2}c".r, "bbbac", "y")
    test("^(b+?|a){1,2}c".r, "bbbbac", "y")
    test("^(foo|)bar$".r, "bar", "y")
    test("^(foo||baz)bar$".r, "bar", "y")
    test("^(foo||baz)bar$".r, "bazbar", "y")
    test("^(foo||baz)bar$".r, "foobar", "y")
    test("^(XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQQQQQQQQQQQQQQQQP:", "y")
    test("^(XXXXXXXXXX|YYYYYYYYYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQX:", "y")
    test("^(XXX|YYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQQQQQQQQQQQQQQQQP:", "y")
    test("^(XXX|YYY|Z.Q*X|Z[TE]Q*P):".r, "ZEQQQX:", "y")
    test("^.{2,3}?((?:b|a|r)+)\\1$".r, "foobarbar", "y")
    test("^.{2,3}?((?:b|a|r)+?)\\1$".r, "foobarbar", "y")
    test("^.{2,3}?(.+)\\1$".r, "foobarbar", "y")
    test("^.{2,3}?(.+?)\\1$".r, "foobarbar", "y")
    test("^.{3,4}((?:b|a|r)+)\\1$".r, "foobarbar", "y")
    test("^.{3,4}((?:b|a|r)+?)\\1$".r, "foobarbar", "y")
    test("^.{3,4}(.+)\\1$".r, "foobarbar", "y")
    test("^.{3,4}(.+?)\\1$".r, "foobarbar", "y")
    test("^m?(\\d)(.*)\\1$".r, "5b5", "y")
    test("^m?(\\D)(.*)\\1$".r, "aba", "y")
    test("^m?(\\S)(.*)\\1$".r, "aba", "y")
    test("^m?(\\W)(.*)\\1$".r, ":b:", "y")
    test("^m?(\\w)(.*)\\1$".r, "aba", "y")
    test("a(?:b|(c|e){1,2}?|d)+?(.)".r, "ace", "y")
    test("a(?:b|c|d)(.)".r, "ace", "y")
    test("a(?:b|c|d)*(.)".r, "ace", "y")
    test("a(?:b|c|d)+(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d)+?(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d)+?(.)".r, "ace", "y")
    test("a(?:b|c|d){5,6}(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d){5,6}?(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d){5,7}(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d){5,7}?(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d){6,7}(.)".r, "acdbcdbe", "y")
    test("a(?:b|c|d){6,7}?(.)".r, "acdbcdbe", "y")
    test("a([bc]*)(c*d)".r, "abcd", "y")
    test("a([bc]*)(c+d)".r, "abcd", "y")
    test("a([bc]*)c*".r, "abc", "y")
    test("a([bc]+)(c*d)".r, "abcd", "y")
    test("a(bc)d".r, "abcd", "y")
    test("foo(aA)*+b".r, "fooaAaAaAaAaAb", "p")
    test("foo(aA)++b".r, "fooaAaAaAaAaAb", "p")
    test("foo(aA)?+b".r, "fooaAb", "p")
    test("foo(aA){1,5}+b".r, "fooaAaAaAaAaAb", "p")
    test("foo(aA|bB)*+b".r, "foobBbBaAaAaAb", "p")
    test("foo(aA|bB)++b".r, "foobBaAbBaAbBb", "p")
    test("foo(aA|bB)?+b".r, "foobBb", "p")
    test("foo(aA|bB){1,5}+b".r, "foobBaAaAaAaAb", "p")
    test("X(\\w+)(?=\\s)|X(\\w+)".r, "Xab", "p")
    test("x(~~)*(?:(?:F)?)?".r, "x~~", "y")
  }
}
